---
title: "Choosing a Digital Filter"
date: last-modified
language: 
    title-block-published: "UPDATED"
author:
    - name: Jem Arnold
vignette: >
    %\VignetteIndexEntry{Choosing a Digital Filter}
    %\VignetteEngine{quarto::html}
    %\VignetteEncoding{UTF-8}
format:
    html:
        embed-resources: true
        toc: true
# execute:
#     echo: false
#     message: false
#     warning: false
#     output: false
knitr:
    opts_chunk:
        collapse: true
        comment: '#>'
        dpi: 300
        out.width: "100%"
        # fig.width: 7
        fig.align: "center"
---

> UNDER DEVELOPMENT

How do I know which filter methods & parameters to use to return optimal signal-to-noise for my mNIRS data? This vignette will demonstrate how to:

* Use `{mNIRS}` to import and display raw NIRS data.
* Display and investigate my NIRS data to identify the relevant signal from noisy data.
* Demonstrate three common digital filtering or "smoothing" methods to extract my NIRS signal from noisy data.
    1. A simple moving average.
    2. A Butterworth low-pass digital filter.
    3. A non-parametric smoothing spline.
* Visually check residuals between raw and filtered data.


## Read in the data file



```{r}
#| label: setup

## TODO
## - import example data
## - pre-process (replace missing data)
## - discuss signal selection
## - - examples: 2-min exercise mean; intra-cadence

## - 1. simple moving average
## - - Moxy data; manufacturer recommendations
## - - two-way symmetrical vs one-way moving average
## - - low sample rate (0.5 Hz), doesnt really matter

## - 2. Butterworth filter
## - - Oxysoft data
## - - low-pass filter
## ...




library(tidyverse)
library(mNIRS) 
# devtools::install_github("jemarnold/mNIRS") ## install development version

oxy_path <- system.file("extdata/oxysoft_interval_example.xlsx",
                        package = "mNIRS")

oxy_data <- read_data(oxy_path,
                      nirs_columns = c(VL_O2Hb = 5,
                                       VL_HHb = 6),
                      sample_column = c(sample = 1),
                      sample_rate = 50, ## oxysoft sample rate
                      keep_all = FALSE,
                      verbose = TRUE)

oxy_data

plot(oxy_data)

```


## What signals are we interested in?

This is the most important question to help us choose a digital filter method. To filter out 'noise' from the data, we need to identify what 'signal' we are interested in pulling out.

If we are interested in longer time-scale (lower frequency) responses, like the mean NIRS values during a 2-min exercise interval, we would want to use a filter which removes most of the higher-frequency 'noise'.

If we are interested in shorter time-scale (higher frequency) responses or responses around a known frequency, such as NIRS amplitude changes during repeated contractions at 4 seconds per repetition (0.25 Hz) or pedalling at 90 rpm (1.5 Hz), we would want to use a filter which preserves these frequencies.

```{r}

## extract metadata from data attributes
nirs_columns <- attributes(oxy_data)$nirs_columns
sample_rate <- attributes(oxy_data)$sample_rate





n <- 30
fc_min <- 0.002 ## Hz
fc_max <- 0.6 ## Hz

map_data <- expand_grid(
    order = 1:4, 
    fc = exp(seq(log(fc_min), log(fc_max), length.out = n)),
) |> 
    mutate(
        cols = setNames(nm = paste0(order, "-", signif(fc, 3)))
    ) |> 
    relocate(cols) |> 
    print()

rmse_data <- purrr::pmap(
    map_data,
    \(cols, order, fc) {
        filtfilt_edges(x = oxy_data$VL_HHb, n = order, W = fc / (sample_rate/2))
    }) |> 
    bind_cols() |>
    add_column(nirs = oxy_data$VL_HHb, .before = 1) |> 
    summarise(
        across(!nirs, 
               ~ sqrt(mean((nirs - .)^2, na.rm = TRUE))),
    ) |> 
    pivot_longer(
        cols = everything(),
        names_to = "params",
        values_to = "RMSE"
    ) |> 
    mutate(
        filter_order = factor(as.numeric(sub("-.*$", "", params))),
        fc = as.numeric(sub(".*?-", "", params)),
    ) |> 
    select(filter_order, fc, RMSE) |> 
    ## remove Inf
    filter(if_any(RMSE, \(.x) is.finite(.x))) |>
    print()


ggplot(rmse_data) + 
    {list( ## Settings
        aes(x = fc, y = RMSE, 
            group = filter_order,
            colour = filter_order),
        # facet_wrap(~ filter_order),
        coord_cartesian(
            xlim = c(0, 0.3),
            ylim = c(0, 5)
        ),
        theme_mNIRS(legend.title = element_text()),
        scale_x_continuous(
            name = "Critical Frequency (Hz)",
            breaks = scales::breaks_pretty(n=8),
            expand = expansion(mult = c(0.0, 0.03))),
        scale_y_continuous(
            name = "RMSE",
            expand = expansion(mult = c(0.0, 0.03))),
        NULL)} + ## Settings
    {list( ## Data
        # geom_vline(xintercept = c(0.02, 0.03, 0.08), linetype = "dotted"),
        geom_line(),
        geom_point(),
        NULL)} ## Data



oxy_data <- 
    oxy_data |> 
    mutate(
        across(VL_HHb, #any_of(nirs_columns),
               \(.x) filter_data(.x,
                                 method = "butter",
                                 type = "low",
                                 n = 1,
                                 critical_frequency = 0.08,
                                 sample_rate = sample_rate),
               .names = "high"),
        across(VL_HHb, #any_of(nirs_columns),
               \(.x) filter_data(.x,
                                 method = "butter",
                                 type = "low",
                                 n = 1,
                                 critical_frequency = 0.04,
                                 sample_rate = sample_rate),
               .names = "low"),
    )

ggplot(oxy_data) + 
        aes(x = sample) +
        theme_mNIRS() +
        scale_x_continuous(
            name = "index",
            expand = expansion(mult = 0.01)) +
        scale_y_continuous(
            name = "nirs",
            expand = expansion(mult = 0.01)) +
        geom_line(aes(y = VL_HHb), alpha = 0.15) +
        geom_line(aes(y = high, colour = "high"), linewidth = 1) +
        geom_line(aes(y = low, colour = "low"), linewidth = 1)

```

