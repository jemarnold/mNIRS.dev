---
title: "mNIRS Processing"
date: last-modified
language: 
    title-block-published: "App Updated"
author:
    - name: Jem Arnold
      orcid: 0000-0003-3908-9447
      email: jem.arnold@ubc.ca
format: 
    dashboard:
        # embed-resources: true
        nav-buttons: 
            - icon: twitter
              href: https://x.com/jem_arnold
            - icon: github
              href: https://github.com/jemarnold
server: shiny
editor: source
execute:
    echo: false
    message: false
    warning: false
    output: true
---

```{r}
#| context: setup

## install latest private repo from github
# devtools::install_github(
#     "jemarnold/mNIRS",
#     upgrade = "never",
#     auth_token = "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")

suppressPackageStartupMessages({
    library(bslib)
    library(shiny)
    library(DT)
    library(mNIRS)
    library(tidyverse)
})

options(digits = 5, digits.secs = 3, scipen = 3,
        dplyr.summarise.inform = FALSE,
        tibble.print_min = 20,
        shiny.maxRequestSize = 50*1024^2)

string_to_named_vector <- function(x) {
    noquotes <- gsub('["\\\"]', '', x)
    split_vec <- unlist(strsplit(noquotes, "\\s*,\\s*"))
    split_list <- strsplit(split_vec, "\\s*=\\s*")
    setNames(sapply(split_list, \(.x) trimws(last(.x))),
             sapply(split_list, \(.x) trimws(first(.x))))
}

# x <- '"Date = mm-dd", "Time = Time[hh:mm:ss]"'
# noquotes <- gsub('["\\\"]', '', x)
#     split_vec <- unlist(strsplit(noquotes, "\\s*,\\s*"))
#     split_list <- strsplit(split_vec, "\\s*=\\s*")
#     setNames(sapply(split_list, \(.x) trimws(.x[2])),
#              sapply(split_list, \(.x) trimws(.x[1])))


filtfilt_edges2 <- function (
        x,
        n = 1,
        W,
        type = c("low", "high", "stop", "pass"),
        edges = c("rev", "rep1", "none")
) {
    type = match.arg(type)
    edges = match.arg(edges)

    ## argument validation
    if (!is.numeric(x)) {
        cli::cli_abort("{.arg x} must be a numeric vector.")
    }
    if (!rlang::is_integerish(n) | n == 0) {
        cli::cli_abort("{.arg n} must be an integer scalar of 1 or greater.")
    }
    if (!is.numeric(W) | W == 0 | W == 1) {
        cli::cli_abort(paste(
            "{.arg W} must be a numeric scalar or two-element vector",
            "`c(low, high)` between 0 and 1."))
    }

    switch(edges,
           ## pads x with the first and last 10% of the vector length
           "rev" = pad_edges <- c(
               rev(head(x, length(x)/10)),
               x,
               rev(tail(x, length(x)/10))),
           ## pads x with repeating first / last value
           "rep1" = pad_edges <- c(
               rep(head(x, 1), length(x)/10),
               x,
               rep(tail(x, 1), length(x)/10)),
           "none" = pad_edges <- x
    )

    ## butterworth filter order (n) and relative cutoff frequency (W)
    x_filt <- signal::filtfilt(
        filt = signal::butter(n = n, W = W, type = type),
        x = pad_edges)

    ## returns the original vector length of x with padding omitted
    switch(edges,
           "rev" = x_filt[(length(x)/10 + 1):(length(x)/10 + length(x))],
           "rep1" = x_filt[(length(x)/10 + 1):(length(x)/10 + length(x))],
           "none" = x_filt)
}



```


# Plot

## User Input {.sidebar}

```{r setup}


## TODO
## DONE instructions
## action button
## split into laps by Lap/Event column
## -- either from one non-NA event value to the next, 
## -- or for all same lap values
## export laps to excel sheets
## kinetics stuff

br()

## Upload file
fileInput(
    "upload_file",
    label = NULL,
    buttonLabel = "Upload File",
    accept = c('.xlsx', '.xls', '.csv', '.CSV'),
)

## Tell it which columns are which
textInput(
    "nirs_columns", 
    label = "mNIRS Channel Names\n(accepts multiple)", 
    placeholder = "new_name = file_name",
    updateOn = "blur")
textInput(
    "sample_column", 
    label = "Time/Sample Column Name", 
    placeholder = "new_name = file_name",
    updateOn = "blur")
textInput(
    "event_column", 
    label = "Lap/Event Column Name", 
    placeholder = "new_name = file_name",
    updateOn = "blur")

numericInput("sample_rate", label = "Sample Rate (estimated automatically)", value = 0, min = 0)

numericInput("downsample_rate", label = "Downsample Rate", value = 0, min = 0)

## remove head/tail samples
numericInput("slice_head", label = "Remove Head Samples", 
             value = 0, min = 0, step = 1)
numericInput("slice_tail", label = "Remove Tail Samples", 
             value = 0, min = 0, step = 1)

## Replace invalid values (column wise)
textInput(
    "invalid_values",
    label = "Replace Invalid Values",
    placeholder = "0, 100, ...",
    updateOn = "blur")

## Replace outliers (column wise)
checkboxInput("replace_outliers", "Replace Outliers")

## Replace missing values (column wise)
checkboxInput("replace_missing", "Replace Missing Values")

## reset start time to zero
checkboxInput("zero_start_time", "Zero Start Time")

## Filter/smooth data (column wise)
selectInput(
    "filter_method",
    label = "Digital Filter Method",
    choices = c("none", "smooth-spline", "butterworth", "moving-average"))
uiOutput("filter_method_ui")

## Shift data (dataframe)
checkboxInput("shift_logical", "Shift Data")
uiOutput("shift_data_ui")

## rescale (dataframe)
checkboxInput("rescale_logical", "Rescale Data")
uiOutput("rescale_data_ui")

## place manual event lines in data
textInput(
    "manual_events",
    label = "Place Event Markers",
    placeholder = "0, 100, ...",
    updateOn = "blur")

checkboxInput("keep_all", "Keep all Columns in File Export")

downloadButton("download_data", "Download Data")

```

## Plot

```{r}

plotOutput("plot")
```

# Data

```{r}

DT::DTOutput("nirs_table")
```

# Kinetics

## User Input {.sidebar}

```{r}

cat("Under Development")
## Slice into laps/events (lapwise list of dataframes)
## Start & end of work with padding to each side
## Define work baseline; end-work mean; reoxygenation peak (lapwise)
## Process reoxy kinetics (lapwise)
## Generate plots (lapwise)

## TODO
## prepare kinetics data
## enter sample number or event label
# mNIRS::prepare_kinetics_data()
## one mNIRS channel at a time (drop-down menu)

## output: multiplot with each kinetics data & fitted data AND
## tabbed table of coefs & fit criteria

## numeric sample_column values
textInput(
    "event_sample",
    label = "Sample Column Values to Detect Kinetics Start",
    placeholder = "0, 100, ...")

## character event label
textInput(
    "event_label", 
    label = "Event Label to Detect Kinetics Start", 
    placeholder = "start event")

```


# Instructions

`r cat("Under Development")`

## Instructions

**Upload File:**
Upload an `.xlsx`, `.xls`, or `.csv` file containing mNIRS data. At the very least, this file should contain one column with an mNIRS data channel. Files exported directly from common NIRS devices in various formats should work.

**Channel Names:**
Enter the column names for the mNIRS data channels (e.g. *SmO2*, *HHb*, *TSI*), Sample column (e.g. *Time*), and Lap/Event column. Only a single mNIRS data channel column is required. Other columns can be left blank if not required / if they do not exist.

Data channels can be renamed with the format `new_name = file_column_name` (without quotes). Original column names must match the file contents exactly. Multiple names can be separated with commas, as `new_name1 = file_name1, new_name2 = file_name2`.

For example, from a *Moxy* .csv file: *NIRS Channel Names:* `smo2_left  = SmO2 Live`; *Sample Column Name:* `time = hh:mm:ss`; [*Lap/Event column* left blank].

**Sample Rate:**
Will be estimated automatically from the data, or can be overwritten explcitly. This is required for certain functions, including downsampling and proper digital filtering. Check the exported file sample times to confirm.

**Downsample Rate:**
Can be defined to downsample the data and reduce the number of output samples to improve signal to noise ratio.

**Remove Head/Tail Samples:**
Will remove samples from the start and end of the data, respectively. This can be used to omit invalid data at the head/tail of a recording, or to include only a particular selection of the entire data file. `<under development: interactive graphical method to select portions of data>`

**Replace Invalid Values:**
A vector of numeric values can be defined to be explicitly removed and interpolated across, such as `0` and `100` when mNIRS sensors return invalid values.

**Replace Outliers:**
Will replace local outliers using a `Hampel` filter.

**Replace Missing Values:**
Will interpolate across missing (`NA`) samples.

**Zero Start Time:**
Reset the sample/time column to start from zero, for when selecting a subset of the data.

**Digital Filter Method:**
Choose a digital filter method from the drop-down options. The simplest option that works well for many datasets is a non-parametric `smooth-spline`. 

A `Butterworth` filter can be defined to optimise the signal-to-noise ratio for your particular signal. The most common *Filter Type* is `"low-pass"`. *Filter Order (n)* should be an integer, typically between `[1:8]`. *Critical Frequency* should be a positive numeric value less than half of the sample rate, in Hz. `<under development: interactive graphical method to compare digital filter methods>`

**Shift Data:**
Will shift mNIRS channels either together (with *Channels to Shift* = `"ensemble"`) or separately (with `"distinct"`) to the value specified by *Value to Shift*. *Position to Shift* defines which reference values from the data channel(s) to shift. *Samples to Shift* defines over how many samples to shift the mean value. 

For example, each mNIRS channel can be shifted so that the first 30-sec mean value begins at zero, with the settings: *Value to Shift* = `0`; *Channels to Shift* = `"distinct"`; *Position to Shift* = `"first"`; *Samples to Shift* = `[30 * Sample Rate]` (equivalent to 30 seconds).

**Rescale Data:**
Will re-scale the mNIRS channels either together (*Channels to Rescale* = `"ensemble"`) or separately (with `"distinct"`) to the data range specified by *Rescale Range Minimum/Maximum*. 

For example, all present mNIRS channels can be re-scaled so that the range of data are within range of `0-100`, preserving the relative scaling of each channel to the other, with the settings: *Rescale Range Minimum* = `0`; *Rescale Range Maximum* = `100`; *Channels to Rescale* = `"ensemble"`.

**Keep all columns in file export:**
Will keep all columns present from the original data file when exporting the processed file, along with the mNIRS, sample, and lap/event columns specified explicitly.

**Download Data:**
Will open a dialogue box to save an `.xlsx` file with the processed data to your system.

**Plot Tab:**
Specified mNIRS channels will be displayed in the `Plot` window and updated according to manually entered processing parameters.

**Data Tab:** 
Processed data can be viewed in the `Data` window and will be updated according to the manually entered processing parameters.

**Kinetics Tab:** `<under development>`





```{r}
#| context: server

## set delay in case tab-out before full string completion
nirs_columns_debounced <- debounce(reactive(input$nirs_columns), 2000)
sample_column_debounced <- debounce(reactive(input$sample_column), 2000)
event_column_debounced <- debounce(reactive(input$event_column), 2000)
# nirs_columns_debounced <- reactive(input$nirs_columns)
# sample_column_debounced <- reactive(input$sample_column)
# event_column_debounced <- reactive(input$event_column)


# Data upload and processing
raw_data <- reactive({
    req(input$upload_file, nirs_columns_debounced(), sample_column_debounced())

    upload_file <- input$upload_file$datapath
    
    data <- mNIRS::read_data(
        file_path = upload_file,
        nirs_columns = string_to_named_vector(nirs_columns_debounced()),
        sample_column = string_to_named_vector(sample_column_debounced()),
        event_column = string_to_named_vector(event_column_debounced()),
        sample_rate = input$sample_rate,
        numeric_time = TRUE,
        keep_all = input$keep_all,
        verbose = FALSE)
    
    return(data)
})


## update `sample_rate`
observe({
    updateNumericInput(session, 
                       inputId = "sample_rate", 
                       value = attributes(raw_data())$sample_rate)
})

## Create dynamic UI for filter method
output$filter_method_ui <- renderUI({
    req(raw_data(), input$filter_method,
        nirs_columns_debounced(), sample_column_debounced())
    
    raw_data <- raw_data()
    sample_rate <- attributes(raw_data)$sample_rate
    
    # Different UI based on selection
    if (input$filter_method == "butterworth") {
        tagList(
            selectInput(
                "butter_type",
                label = "Butterworth Filter Type",
                choices = c("low", "high", "stop", "pass")),
            numericInput(
                "n",
                label = "Filter Order (n)",
                value = 2,
                min = 1,
                max = 10,
                step = 1),
            # numericInput(
            #   "W",
            #   label = "Fractional Critical Frequency (W)",
            #   value = 0.1,
            #   min = 0,
            #   max = 1,
            #   step = 0.01),
            numericInput(
                "critical_frequency",
                label = "Critical Frequency (Hz)",
                value = 0.1,
                min = 0,
                max = sample_rate/2,
                step = 0.05)
        )
    } else if (input$filter_method == "moving-average") {
        tagList(
            numericInput(
                "width",
                label = "width",
                value = 15,
                min = 1,
                step = 1)
        )
    } else {
        NULL
    }
})

## Create dynamic UI for shift option
output$shift_data_ui <- renderUI({
    req(raw_data(), input$shift_logical,
        nirs_columns_debounced(), sample_column_debounced())
    
    # Different UI based on selection
    if (input$shift_logical) {
        tagList(
            numericInput(
                "shift_value",
                label = "Value to Shift",
                value = 0),
            selectInput(
                "shift_which_cols",
                label = "Channels to Shift",
                choices = c("ensemble", "distinct")),
            selectInput(
                "shift_position",
                label = "Position to Shift",
                choices = c("minimum", "maximum", "first")),
            numericInput(
                "shift_samples",
                label = "Samples to Shift",
                value = 1),
        )
    }
})

## Create dynamic UI for rescale option
output$rescale_data_ui <- renderUI({
    req(raw_data(), input$rescale_logical,
        nirs_columns_debounced(), sample_column_debounced())
    
    # Different UI based on selection
    if (input$rescale_logical) {
        tagList(
            numericInput(
                "rescale_min",
                label = "Rescale Range Minimum",
                value = 0),
            numericInput(
                "rescale_max",
                label = "Rescale Range Maximum",
                value = 100),
            selectInput(
                "rescale_which_cols",
                label = "Channels to Rescale",
                choices = c("ensemble", "distinct")),
        )
    }
})



nirs_data <- reactive({
    req(raw_data(), nirs_columns_debounced(), sample_column_debounced())
    
    raw_data <- raw_data()
    nirs_columns <- attributes(raw_data)$nirs_columns
    sample_column <- attributes(raw_data)$sample_column
    event_column <- attributes(raw_data)$event_column
    sample_rate <- attributes(raw_data)$sample_rate
    invalid_values <- strsplit(input$invalid_values, split = "\\s*,\\s*")[[1]] |> 
        as.numeric()
    manual_events <- strsplit(input$manual_events, split = "\\s*,\\s*")[[1]] |> 
        as.numeric()
    
    nirs_data <- raw_data |> 
        mNIRS::downsample_data(
            sample_column = sample_column,
            sample_rate = sample_rate,
            downsample_rate = input$downsample_rate,
            verbose = FALSE
        ) |> 
        ## remove the head rows
        (\(.df) if (input$slice_head > 0) {
            slice_tail(.df, n = -input$slice_head)
            # filter(.df, .data[[sample_column]] > input$slice_head)
        } else {.df})() |> 
        ## remove the tail rows
        (\(.df) if (input$slice_tail > 0) {
            slice_head(.df, n = -input$slice_tail)
            # filter(.df, .data[[sample_column]] < input$slice_tail)
        } else {.df})() |> 
        mutate(
            if (input$replace_outliers) {
                across(
                    any_of(nirs_columns),
                    \(.x) mNIRS::replace_outliers(
                        .x, 
                        width = 5 * sample_rate,  ## 5-sec window
                        na.rm = TRUE, 
                        return = "median"))
            },
            if (!is.null(invalid_values)) {
                across(
                    any_of(nirs_columns),
                    \(.x) mNIRS::replace_invalid(
                        .x, 
                        values = invalid_values, 
                        width = 5 * sample_rate, ## 5-sec window
                        return = "median"))
            },
            if (input$replace_missing) {
                across(
                    any_of(nirs_columns),
                    \(.x) mNIRS::replace_missing(
                        .x, method = "linear", na.rm = TRUE))
            },
            if (input$filter_method == "smooth-spline") {
                across(
                    any_of(nirs_columns),
                    \(.x) mNIRS::filter_data(
                        .x, method = input$filter_method))
            } else if (input$filter_method == "butterworth") {
                req(input$n, input$critical_frequency)
                
                across(
                    any_of(nirs_columns),
                    # \(.x) mNIRS::filter_data(
                    #     .x, method = "butterworth",
                    #     type = input$butter_type,
                    #     n = input$n,
                    #     critical_frequency = input$critical_frequency,
                    #     sample_rate = sample_rate)
                    \(.x) filtfilt_edges2(
                        .x,
                        type = input$butter_type,
                        n = input$n,
                        W = input$critical_frequency / (sample_rate/2))
                )
            } else if (input$filter_method == "moving-average") {
                req(input$width)
                
                across(
                    any_of(nirs_columns),
                    \(.x) mNIRS::filter_data(
                        .x, method = input$filter_method, 
                        width = input$width))
            },
        ) |> 
        (\(.df) if (input$shift_logical) {
            req(input$shift_value, input$shift_position, 
                input$shift_which_cols, input$shift_samples)
            
            if (input$shift_which_cols == "ensemble") {
                shift_nirs_columns <- nirs_columns
            } else if (input$shift_which_cols == "distinct") {
                shift_nirs_columns <- as.list(nirs_columns)
            }
            
            mNIRS::shift_data(
                data = .df,
                nirs_columns = shift_nirs_columns,
                shift_to = input$shift_value,
                position = input$shift_position,
                mean_samples = input$shift_samples,
            )
        } else {.df})() |> 
        (\(.df) if (input$rescale_logical) {
            req(input$rescale_min, input$rescale_max, 
                input$rescale_which_cols)
            
            if (input$rescale_which_cols == "ensemble") {
                rescale_nirs_columns <- nirs_columns
            } else if (input$rescale_which_cols == "distinct") {
                rescale_nirs_columns <- as.list(nirs_columns)
            }
            
            mNIRS::rescale_data(
                data = .df,
                nirs_columns = rescale_nirs_columns,
                rescale_range = c(input$rescale_min, input$rescale_max)
            )
        } else {.df})() |> 
        mutate(
            ## reset sample/time values to zero
            if (input$zero_start_time) {
                across(any_of(sample_column), \(.x) .x - first(.x))  
            },
            event = if (isTruthy(manual_events) & !isTruthy(event_column)) {
                case_when(
                    .data[[sample_column]] %in% manual_events ~
                        as.character(.data[[sample_column]]),
                    TRUE ~ NA_character_)
            },
            if (isTruthy(manual_events) & isTruthy(event_column)) {
                across(any_of(event_column),
                       \(.x) case_when(
                           .data[[sample_column]] %in% manual_events ~
                               if(is.numeric(.x)) {
                                   .data[[sample_column]]   
                               } else {as.character(.data[[sample_column]])},
                           TRUE ~ .x)
                )
            },
            across(any_of(nirs_columns), \(.x) round(.x, 2)),
            across(any_of(sample_column), 
                   \(.x) round(.x * sample_rate) / sample_rate),
        )
    
    return(nirs_data)
    
})


output$nirs_table <- DT::renderDT({
    req(raw_data(), nirs_data())
    
    table <- DT::datatable(
        nirs_data(),
        options = list(
            pageLength = 25,
            scrollX = TRUE,
            searchHighlight = TRUE
        ))
    
    return(table)
})



output$plot <- renderPlot({
    req(raw_data(), nirs_data(), 
        nirs_columns_debounced(), sample_column_debounced())
    
    nirs_data <- nirs_data()
    manual_events <- strsplit(input$manual_events, split = "\\s*,\\s*")[[1]] |> 
        as.numeric()
    
    plot(nirs_data) +
        if (!is.null(manual_events)) {
            geom_vline(xintercept = manual_events, linetype = "dashed")
        } else {NULL}
})



output$download_data <- downloadHandler(
    
    filename = function() {
        paste0("mNIRS_processed_", Sys.time(), ".xlsx")
    },
    
    content = function(file) {
        writexl::write_xlsx(nirs_data(), path = file)
    }
)

```

